/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * LearningWordsDialog.java
 *
 * Created on 2010-1-27, 17:01:30
 */
package com.drowltd.spellbook.ui.desktop.study;

import com.drowltd.spellbook.core.preferences.PreferencesManager;
import static com.drowltd.spellbook.core.preferences.PreferencesManager.Preference;
//import com.drowltd.spellbook.core.db.Dictionary;
import com.drowltd.spellbook.core.model.Dictionary;
import com.drowltd.spellbook.core.i18n.Translator;
import com.drowltd.spellbook.core.service.DictionaryService;
import com.drowltd.spellbook.ui.desktop.IconManager;
import java.awt.Frame;
import java.util.List;
import java.util.ArrayList;
import java.util.Random;
import java.util.regex.Pattern;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;

/**
 *
 * @author Sasho
 */
public class StudyWordsDialog extends javax.swing.JDialog {

    private int fromWordsIndex;
    private int toWordsIndex;
    //private DatabaseService dictDb;
    private DictionaryService dictDb;
    private static final PreferencesManager PM = PreferencesManager.getInstance();
    private static final Translator TRANSLATOR = Translator.getTranslator("LearningWordsDialog");
    //private Dictionary selectedDictionary = Dictionary.EN_BG;
    private Dictionary selectedDictionary;
    private SelectedDictionary selectedDictionaryEnum = SelectedDictionary.EN_BG;
    private String word;
    private WordsDialog wordsDialog;
    private static List<String> words = new ArrayList<String>();
    private List<String> wordsForLearning = new ArrayList<String>();
    private List<String> translationForLearning = new ArrayList<String>();
    private List shuffleWordsForLearning = new ArrayList<String>();
    private List shuffleTranslationForLearning = new ArrayList<String>();
    private List<Dictionary> dictionaries = new ArrayList<Dictionary>();
    private int wordIndex = 0;
    private long countOfWords;
    private Integer correctAnswer;
    private Integer wrongAnswer;
    private Integer answerSeen;
    private boolean isStopedLearn = true;
    private HowToEnumerate howToEnumerate = HowToEnumerate.IN_ORDER_OF_INPUT;
    private Frame parent;

    public enum SelectedDictionary {

        EN_BG, BG_EN
    }

    public enum HowToEnumerate {

        IN_ORDER_OF_INPUT, IN_REVERSE_ORDER_OF_INPUT, RANDOM
    }

    /** Creates new form LearningWordsDialog */
    public StudyWordsDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        TRANSLATOR.reset();
        this.parent = parent;
        initComponents();

        dictDb = DictionaryService.getInstance();
        ButtonGroup enumerateGroup = new ButtonGroup();
        enumerateGroup.add(inReverseOrderOfInputRadioButton);
        enumerateGroup.add(inOrderOfInputRadioButton);
        enumerateGroup.add(randomRadioButton);
        inOrderOfInputRadioButton.setSelected(true);
        dictionaries = dictDb.getDictionaries();
        words = dictDb.getWordsFromDictionary(dictionaries.get(0));
        answerButton.setEnabled(false);
        seeAnswerButton.setEnabled(false);
        stopButton.setEnabled(false);
        correctAnswer = new Integer(0);
        wrongAnswer = new Integer(0);
        answerSeen = new Integer(0);
        countOfWords = dictDb.getCountOfTheWords();
        checkingTheDatabase();
        fromLanguageComboBox.setSelectedIndex(PM.getInt(Preference.LEARNING_WORDS_FROM_LANG, fromLanguageComboBox.getSelectedIndex()));
        toLanguageComboBox.setSelectedIndex(PM.getInt(Preference.LEARNING_WORDS_TO_LANG, toLanguageComboBox.getSelectedIndex()));

    }

    public static List<String> getWords() {
        return words;
    }

    // public int getCountOFTheWords() {
    //     return countOFTheWords;
    // }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        wordsButton = new javax.swing.JButton();
        warningIconLabel = new javax.swing.JLabel();
        firstRowLabel = new javax.swing.JLabel();
        secondRowLabel = new javax.swing.JLabel();
        fromLanguageComboBox = new javax.swing.JComboBox();
        toLanguageComboBox = new javax.swing.JComboBox();
        howToEnumeratePanel = new javax.swing.JPanel();
        randomRadioButton = new javax.swing.JRadioButton();
        inReverseOrderOfInputRadioButton = new javax.swing.JRadioButton();
        inOrderOfInputRadioButton = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        startButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        translateField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        answerField = new javax.swing.JTextField();
        answerButton = new javax.swing.JButton();
        answerStatutLabel = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        countOfTheCorrectWordsLabel = new javax.swing.JLabel();
        countOfTheWrongWordsLabel = new javax.swing.JLabel();
        seeAnswerButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        answerSeenLabel = new javax.swing.JLabel();
        imoticonLabel = new javax.swing.JLabel();
        transcriptionLabel = new javax.swing.JLabel();
        repeatMisspelledWordsCheckBox = new javax.swing.JCheckBox();
        repeatWordCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("i18n/LearningWordsDialog"); // NOI18N
        setTitle(bundle.getString("LearningWordsDialog(Title)")); // NOI18N
        setResizable(false);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setMaximumSize(new java.awt.Dimension(224, 159));

        jLabel1.setText(bundle.getString("Languages(Label)")); // NOI18N

        jLabel2.setText(bundle.getString("From(Lable)")); // NOI18N

        jLabel3.setText(bundle.getString("To(Label)")); // NOI18N

        wordsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/16x16/dictionary.png"))); // NOI18N
        wordsButton.setText(bundle.getString("Words(Button)")); // NOI18N
        wordsButton.setMaximumSize(new java.awt.Dimension(109, 25));
        wordsButton.setMinimumSize(new java.awt.Dimension(109, 25));
        wordsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wordsButtonActionPerformed(evt);
            }
        });

        warningIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/24x24/warning.png"))); // NOI18N

        firstRowLabel.setText(bundle.getString("AddWordsFirstLabel(Message)")); // NOI18N

        fromLanguageComboBox.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                fromLanguageComboBoxPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                fromLanguageComboBoxPopupMenuWillBecomeVisible(evt);
            }
        });

        toLanguageComboBox.addItem(bundle.getString("English(Item)"));
        toLanguageComboBox.addItem(bundle.getString("Bulgarian(Item)"));
        toLanguageComboBox.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                toLanguageComboBoxPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                toLanguageComboBoxPopupMenuWillBecomeVisible(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(warningIconLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(wordsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(secondRowLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(firstRowLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fromLanguageComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(toLanguageComboBox, 0, 143, Short.MAX_VALUE))))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fromLanguageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(jLabel3)
                    .addComponent(toLanguageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(wordsButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(firstRowLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(secondRowLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(warningIconLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {firstRowLabel, secondRowLabel});

        fromLanguageComboBox.addItem(bundle.getString("English(Item)"));
        fromLanguageComboBox.addItem(bundle.getString("Bulgarian(Item)"));
        fromLanguageComboBox.setSelectedIndex(1);

        howToEnumeratePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        howToEnumeratePanel.setMaximumSize(new java.awt.Dimension(224, 159));
        howToEnumeratePanel.setMinimumSize(new java.awt.Dimension(224, 159));

        randomRadioButton.setText(bundle.getString("Random(Label)")); // NOI18N

        inReverseOrderOfInputRadioButton.setText(bundle.getString("InReverseOrderOfInput(Label)")); // NOI18N

        inOrderOfInputRadioButton.setText(bundle.getString("InOrderOfInput(Label)")); // NOI18N

        jLabel5.setText(bundle.getString("Enumerate(Label)")); // NOI18N

        javax.swing.GroupLayout howToEnumeratePanelLayout = new javax.swing.GroupLayout(howToEnumeratePanel);
        howToEnumeratePanel.setLayout(howToEnumeratePanelLayout);
        howToEnumeratePanelLayout.setHorizontalGroup(
            howToEnumeratePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, howToEnumeratePanelLayout.createSequentialGroup()
                .addContainerGap(37, Short.MAX_VALUE)
                .addGroup(howToEnumeratePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(randomRadioButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(inReverseOrderOfInputRadioButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(inOrderOfInputRadioButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE))
                .addContainerGap())
        );
        howToEnumeratePanelLayout.setVerticalGroup(
            howToEnumeratePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(howToEnumeratePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(inOrderOfInputRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(inReverseOrderOfInputRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(randomRadioButton)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setMaximumSize(new java.awt.Dimension(492, 238));
        jPanel3.setMinimumSize(new java.awt.Dimension(492, 238));

        startButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/16x16/media_play_green.png"))); // NOI18N
        startButton.setText(bundle.getString("Start(Button)")); // NOI18N
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        jLabel4.setText(bundle.getString("OverTranslateField(Label)")); // NOI18N

        translateField.setEditable(false);

        jLabel6.setText(bundle.getString("OverAnswerField(Label)")); // NOI18N

        answerField.setEditable(false);
        answerField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                answerFieldActionPerformed(evt);
            }
        });

        answerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/16x16/status_SuggestedAnswer.gif"))); // NOI18N
        answerButton.setText(bundle.getString("Answer(Button)")); // NOI18N
        answerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                answerButtonActionPerformed(evt);
            }
        });

        jLabel7.setText(bundle.getString("Correct(Label)")); // NOI18N

        jLabel8.setText(bundle.getString("Wrong(Label)")); // NOI18N

        seeAnswerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/16x16/Bulb On.gif"))); // NOI18N
        seeAnswerButton.setText(bundle.getString("SeeAnswer(Button)")); // NOI18N
        seeAnswerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seeAnswerButtonActionPerformed(evt);
            }
        });

        stopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/16x16/media_stop_red.png"))); // NOI18N
        stopButton.setText(bundle.getString("Stop(Button)")); // NOI18N
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        jLabel9.setText(bundle.getString("AnswerSeen(Label)")); // NOI18N

        transcriptionLabel.setText(" ");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(translateField, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(answerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(seeAnswerButton))
                    .addComponent(answerField, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                    .addComponent(transcriptionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(startButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(40, 40, 40)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(countOfTheCorrectWordsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(countOfTheWrongWordsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                            .addComponent(answerSeenLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)))
                    .addComponent(answerStatutLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(imoticonLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(57, 57, 57))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {answerButton, seeAnswerButton, startButton, stopButton});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(stopButton)
                    .addComponent(startButton)
                    .addComponent(jLabel7)
                    .addComponent(countOfTheCorrectWordsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel4)
                    .addComponent(jLabel8)
                    .addComponent(countOfTheWrongWordsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(translateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(answerSeenLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                        .addComponent(imoticonLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(answerStatutLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                        .addComponent(transcriptionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(answerField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(answerButton)
                    .addComponent(seeAnswerButton))
                .addContainerGap())
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {answerButton, seeAnswerButton, startButton, stopButton});

        repeatMisspelledWordsCheckBox.setText(bundle.getString("RepeatMisspelledWords(CheckBox)")); // NOI18N
        repeatMisspelledWordsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                repeatMisspelledWordsCheckBoxActionPerformed(evt);
            }
        });

        repeatWordCheckBox.setText(bundle.getString("RepeatWords(CheckBox)")); // NOI18N
        repeatWordCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                repeatWordCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(repeatWordCheckBox)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(howToEnumeratePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(repeatMisspelledWordsCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {howToEnumeratePanel, jPanel1});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(repeatWordCheckBox))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(howToEnumeratePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(repeatMisspelledWordsCheckBox)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {howToEnumeratePanel, jPanel1});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        startLearning();
    }//GEN-LAST:event_startButtonActionPerformed

    private void wordsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wordsButtonActionPerformed

        wordsDialog = new WordsDialog(parent, true);
        wordsDialog.clear();
        wordsDialog.setWordsInTable(false);
        wordsDialog.setLocationRelativeTo(this);
        wordsDialog.setVisible(true);

    }//GEN-LAST:event_wordsButtonActionPerformed

    private void answerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_answerButtonActionPerformed

        if (selectedDictionaryEnum == SelectedDictionary.EN_BG) {
            if (howToEnumerate == HowToEnumerate.RANDOM) {
                getAnswer(shuffleWordsForLearning, shuffleTranslationForLearning);
            } else {
                getAnswer(wordsForLearning, translationForLearning);
            }
        }
        if (selectedDictionaryEnum == SelectedDictionary.BG_EN) {
            if (howToEnumerate == HowToEnumerate.RANDOM) {
                getAnswer(shuffleTranslationForLearning, shuffleWordsForLearning);
            } else {
                getAnswer(translationForLearning, wordsForLearning);
            }
        }
    }//GEN-LAST:event_answerButtonActionPerformed

    private void seeAnswerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seeAnswerButtonActionPerformed
        if (selectedDictionaryEnum == SelectedDictionary.EN_BG) {
            if (howToEnumerate == HowToEnumerate.RANDOM) {
                word = (String) shuffleTranslationForLearning.get(wordIndex);
            } else {
                word = translationForLearning.get(wordIndex);
            }
            String message = TRANSLATOR.translate("SeeAnswerMessege(Message)") + " \"" + word + "\"";
            JOptionPane.showMessageDialog(this, message, TRANSLATOR.translate("SeeAnswerPaneTittle(Title)"), JOptionPane.INFORMATION_MESSAGE);
        }
        if (selectedDictionaryEnum == SelectedDictionary.BG_EN) {
            if (howToEnumerate == HowToEnumerate.RANDOM) {
                word = (String) shuffleWordsForLearning.get(wordIndex);
            } else {
                word = wordsForLearning.get(wordIndex);
            }
            String message = TRANSLATOR.translate("SeeAnswerMessege(Message)") + " \"" + word + "\"";
            JOptionPane.showMessageDialog(this, message, TRANSLATOR.translate("SeeAnswerPaneTittle(Title)"), JOptionPane.INFORMATION_MESSAGE);
        }
        answerSeen++;
        answerSeenLabel.setText(answerSeen.toString());
        answerField.requestFocus();
    }//GEN-LAST:event_seeAnswerButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed

        stopLearning();
        //answerField.setText(null);

    }//GEN-LAST:event_stopButtonActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        PM.putInt(Preference.LEARNING_WORDS_FROM_LANG, fromLanguageComboBox.getSelectedIndex());
        PM.putInt(Preference.LEARNING_WORDS_TO_LANG, toLanguageComboBox.getSelectedIndex());
        PM.putBoolean(Preference.LEARNING_IN_ORDER, inOrderOfInputRadioButton.isSelected());
        PM.putBoolean(Preference.LEARNING_IN_REVERSE_ORDER, inReverseOrderOfInputRadioButton.isSelected());
        PM.putBoolean(Preference.LEARNING_RANDOM, randomRadioButton.isSelected());
        PM.putBoolean(Preference.REPEAT_MISSPELLED_WORDS, repeatMisspelledWordsCheckBox.isSelected());
        PM.putBoolean(Preference.REPEAT_WORDS, repeatWordCheckBox.isSelected());

    }//GEN-LAST:event_formWindowClosed

    private void answerFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_answerFieldActionPerformed
        if (!isStopedLearn) {
            if (selectedDictionaryEnum == SelectedDictionary.EN_BG) {
                if (howToEnumerate == HowToEnumerate.RANDOM) {
                    getAnswer(shuffleWordsForLearning, shuffleTranslationForLearning);
                } else {
                    getAnswer(wordsForLearning, translationForLearning);
                }
            }
            if (selectedDictionaryEnum == SelectedDictionary.BG_EN) {
                if (howToEnumerate == HowToEnumerate.RANDOM) {
                    getAnswer(shuffleTranslationForLearning, shuffleWordsForLearning);
                } else {
                    getAnswer(translationForLearning, wordsForLearning);
                }
            }
        }
    }//GEN-LAST:event_answerFieldActionPerformed

    private void repeatWordCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_repeatWordCheckBoxActionPerformed
        if (repeatWordCheckBox.isSelected()) {
            repeatMisspelledWordsCheckBox.setSelected(false);
        }
        if (!isStopedLearn) {
            answerField.requestFocus();
        }
    }//GEN-LAST:event_repeatWordCheckBoxActionPerformed

    private void repeatMisspelledWordsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_repeatMisspelledWordsCheckBoxActionPerformed
        if (repeatMisspelledWordsCheckBox.isSelected()) {
            repeatWordCheckBox.setSelected(false);
        }
        if (!isStopedLearn) {
            answerField.requestFocus();
        }
    }//GEN-LAST:event_repeatMisspelledWordsCheckBoxActionPerformed

    private void fromLanguageComboBoxPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_fromLanguageComboBoxPopupMenuWillBecomeInvisible
        if (fromLanguageComboBox.getSelectedItem() == toLanguageComboBox.getSelectedItem()) {
            toLanguageComboBox.setSelectedIndex(fromWordsIndex);
        }
    }//GEN-LAST:event_fromLanguageComboBoxPopupMenuWillBecomeInvisible

    private void fromLanguageComboBoxPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_fromLanguageComboBoxPopupMenuWillBecomeVisible
        fromWordsIndex = fromLanguageComboBox.getSelectedIndex();
    }//GEN-LAST:event_fromLanguageComboBoxPopupMenuWillBecomeVisible

    private void toLanguageComboBoxPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_toLanguageComboBoxPopupMenuWillBecomeInvisible
        if (toLanguageComboBox.getSelectedItem() == fromLanguageComboBox.getSelectedItem()) {
            fromLanguageComboBox.setSelectedIndex(toWordsIndex);
        }
    }//GEN-LAST:event_toLanguageComboBoxPopupMenuWillBecomeInvisible

    private void toLanguageComboBoxPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_toLanguageComboBoxPopupMenuWillBecomeVisible
        toWordsIndex = toLanguageComboBox.getSelectedIndex();
    }//GEN-LAST:event_toLanguageComboBoxPopupMenuWillBecomeVisible

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        checkingTheDatabase();
        countOfWords = dictDb.getCountOfTheWords();
    }//GEN-LAST:event_formWindowGainedFocus
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton answerButton;
    private javax.swing.JTextField answerField;
    private javax.swing.JLabel answerSeenLabel;
    private javax.swing.JLabel answerStatutLabel;
    private javax.swing.JLabel countOfTheCorrectWordsLabel;
    private javax.swing.JLabel countOfTheWrongWordsLabel;
    private javax.swing.JLabel firstRowLabel;
    private javax.swing.JComboBox fromLanguageComboBox;
    private javax.swing.JPanel howToEnumeratePanel;
    private javax.swing.JLabel imoticonLabel;
    private javax.swing.JRadioButton inOrderOfInputRadioButton;
    private javax.swing.JRadioButton inReverseOrderOfInputRadioButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton randomRadioButton;
    private javax.swing.JCheckBox repeatMisspelledWordsCheckBox;
    private javax.swing.JCheckBox repeatWordCheckBox;
    private javax.swing.JLabel secondRowLabel;
    private javax.swing.JButton seeAnswerButton;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JComboBox toLanguageComboBox;
    private javax.swing.JLabel transcriptionLabel;
    private javax.swing.JTextField translateField;
    private javax.swing.JLabel warningIconLabel;
    private javax.swing.JButton wordsButton;
    // End of variables declaration//GEN-END:variables

    public void getAnswer(List<String> words, List<String> translations) {
        String wordTranslation = answerField.getText();
        wordTranslation = wordTranslation.toLowerCase();
        if (wordTranslation == null || wordTranslation.isEmpty()) {
            JOptionPane.showMessageDialog(this, TRANSLATOR.translate("AnswerFeild(Message)"), null, JOptionPane.ERROR_MESSAGE);
            answerField.requestFocus();
        }
        List<String> possibleAnswers = new ArrayList<String>();
        String translation = translations.get(wordIndex);
        translation = translation.toLowerCase();
        translation = translation.replaceAll("\\b(n|a|v|(attr)|(adv)|[0-9]+)\\b\\s?", "");

        int i = 0;
        while (translation.charAt(i) == ' ') {
            translation = translation.substring(1);
        }

        String[] answers = Pattern.compile("\\s*[,|;|.|\\n]\\s*").split(translation, 0);

        for (String answer : answers) {
            possibleAnswers.add(answer);
        }
        if (repeatWordCheckBox.isSelected() && !wordTranslation.isEmpty()) {
            if (howToEnumerate == HowToEnumerate.IN_ORDER_OF_INPUT) {
                wordIndex--;
            }
            if (howToEnumerate == HowToEnumerate.IN_REVERSE_ORDER_OF_INPUT) {
                wordIndex++;
            }
            if (howToEnumerate == HowToEnumerate.RANDOM) {
                wordIndex--;
            }
        }

        if (possibleAnswers.contains(wordTranslation)) {
            answerStatutLabel.setText(TRANSLATOR.translate("CorrectAnswer(Message)"));
            correctAnswer++;
            countOfTheCorrectWordsLabel.setText(correctAnswer.toString());
            imoticonLabel.setIcon(IconManager.getImageIcon("laugh.gif", IconManager.IconSize.SIZE48));
        } else {
            if (!wordTranslation.isEmpty()) {
                answerStatutLabel.setText(TRANSLATOR.translate("WrongAnswer(Message)"));
                imoticonLabel.setIcon(IconManager.getImageIcon("shy.gif", IconManager.IconSize.SIZE48));
                answerField.setText(null);
            }
            if (wordTranslation.isEmpty()) {
                answerStatutLabel.setText(null);
            }
            if (!wordTranslation.isEmpty()) {
                wrongAnswer++;
            }
            countOfTheWrongWordsLabel.setText(wrongAnswer.toString());

            if (repeatMisspelledWordsCheckBox.isSelected() && !wordTranslation.isEmpty()) {
                if (howToEnumerate == HowToEnumerate.IN_ORDER_OF_INPUT) {
                    wordIndex--;
                }
                if (howToEnumerate == HowToEnumerate.IN_REVERSE_ORDER_OF_INPUT) {
                    wordIndex++;
                }
                if (howToEnumerate == HowToEnumerate.RANDOM) {
                    wordIndex--;
                }
            }
        }
        if (howToEnumerate == HowToEnumerate.IN_ORDER_OF_INPUT) {
            if (!wordTranslation.isEmpty()) {
                wordIndex++;
            }
            if (wordIndex < countOfWords) {
                word = words.get(wordIndex);
                translateField.setText(word);
                String transcription = getTranscription(word);
                transcriptionLabel.setText(" " + transcription);
                answerField.setText(null);
            }
            if (wordIndex == countOfWords) {
                stopLearning();
            }

            //answerField.setText(null);
        } else if (howToEnumerate == HowToEnumerate.IN_REVERSE_ORDER_OF_INPUT) {
            if (!wordTranslation.isEmpty()) {
                wordIndex--;
            }
            if (wordIndex >= 0) {
                word = words.get(wordIndex);
                translateField.setText(word);
                String transcription = getTranscription(word);
                transcriptionLabel.setText(" " + transcription);
                answerField.setText(null);
            }
            if (wordIndex == -1) {
                stopLearning();
            }

            //answerField.setText(null);
        } else {
            if (!wordTranslation.isEmpty()) {
                wordIndex++;
            }
            if (wordIndex < countOfWords) {
                word = words.get(wordIndex);
                translateField.setText(word);
                String transcription = getTranscription(word);
                transcriptionLabel.setText(" " + transcription);
                answerField.setText(null);
            }
            if (wordIndex == countOfWords) {
                stopLearning();
            }
            //answerField.setText(null);
        }
        answerField.requestFocus();
    }

    public void shuffle(List words, List translations) {
        if (words.size() > 0 && translations.size() > 0) {
            List copyWords = new ArrayList();
            List copyTranslations = new ArrayList();
            for (Object object : words) {
                copyWords.add(object);
            }
            for (Object object : translations) {
                copyTranslations.add(object);
            }
            Random generator = new Random();

            do {
                int index = (int) (generator.nextDouble() * (double) copyWords.size());
                shuffleWordsForLearning.add(copyWords.remove(index));
                shuffleTranslationForLearning.add(copyTranslations.remove(index));
            } while (copyWords.size() > 0);
        }
    }

    public void checkingTheDatabase() {
        wordsForLearning = dictDb.getWordsForStudy();
        if (wordsForLearning.isEmpty()) {
            startButton.setEnabled(false);
            warningIconLabel.setIcon(IconManager.getImageIcon("warning.png", IconManager.IconSize.SIZE24));
            firstRowLabel.setText(TRANSLATOR.translate("AddWordsFirstLabel(Message)"));
            secondRowLabel.setText(TRANSLATOR.translate("AddWordsSecondLabel(Message)"));
        } else {
            startButton.setEnabled(isStopedLearn);
            warningIconLabel.setIcon(null);
            firstRowLabel.setText(null);
            secondRowLabel.setText(null);
        }
    }

    public void showLearningWordsDialog() {

        inOrderOfInputRadioButton.setSelected(PM.getBoolean(Preference.LEARNING_IN_ORDER, true));
        inReverseOrderOfInputRadioButton.setSelected(PM.getBoolean(Preference.LEARNING_IN_REVERSE_ORDER, false));
        randomRadioButton.setSelected(PM.getBoolean(Preference.LEARNING_RANDOM, false));
        repeatMisspelledWordsCheckBox.setSelected(PM.getBoolean(Preference.REPEAT_MISSPELLED_WORDS, true));
        repeatWordCheckBox.setSelected(PM.getBoolean(Preference.REPEAT_WORDS, false));

        setVisible(true);

    }

    public void stopLearning() {

        isStopedLearn = true;
        answerButton.setEnabled(false);
        seeAnswerButton.setEnabled(false);
        stopButton.setEnabled(false);
        wordsButton.setEnabled(true);
        startButton.setEnabled(true);
        translateField.setText(null);
        transcriptionLabel.setText(null);
        answerField.setText(null);
        answerField.setEditable(false);
        startButton.requestFocus();
    }

    public void startLearning() {
        if ((fromLanguageComboBox.getSelectedIndex() == 0) && (toLanguageComboBox.getSelectedIndex() == 1)) {   //English Index = 0; Bulgarian = 1;
            selectedDictionaryEnum = SelectedDictionary.EN_BG;
        }
        if ((fromLanguageComboBox.getSelectedIndex() == 1) && (toLanguageComboBox.getSelectedIndex() == 0)) {
            selectedDictionaryEnum = SelectedDictionary.BG_EN;
        }
        String translation = null;
        wordsForLearning = dictDb.getWordsForStudy();
        translationForLearning = dictDb.getTranslationForStudy();
        answerButton.setEnabled(true);
        seeAnswerButton.setEnabled(true);
        stopButton.setEnabled(true);
        isStopedLearn = false;
        startButton.setEnabled(false);
        wordsButton.setEnabled(false);
        answerField.setEditable(true);
        answerField.setText(null);
        answerStatutLabel.setText(null);
        answerField.requestFocus();
        countOfTheCorrectWordsLabel.setText("0");
        countOfTheWrongWordsLabel.setText("0");
        answerSeenLabel.setText("0");
        correctAnswer = new Integer(0);
        wrongAnswer = new Integer(0);
        answerSeen = new Integer(0);
        shuffle(wordsForLearning, translationForLearning);
        if (inOrderOfInputRadioButton.isSelected()) {
            howToEnumerate = HowToEnumerate.IN_ORDER_OF_INPUT;
            wordIndex = 0;
            if (selectedDictionaryEnum == SelectedDictionary.EN_BG) {
                word = wordsForLearning.get(wordIndex);
                translateField.setText(word);
                String transcription = getTranscription(word);
                transcriptionLabel.setText(" " + transcription);
            } else {
                translation = translationForLearning.get(wordIndex);
                translateField.setText(translation);
            }
        }
        if (inReverseOrderOfInputRadioButton.isSelected()) {
            howToEnumerate = HowToEnumerate.IN_REVERSE_ORDER_OF_INPUT;
            long wordIndex1 = dictDb.getCountOfTheWords() - 1;
            wordIndex = (int) wordIndex1;
            if (selectedDictionaryEnum == SelectedDictionary.EN_BG) {
                word = wordsForLearning.get(wordIndex);
                translateField.setText(word);
                translateField.setText(word);
                String transcription = getTranscription(word);
                transcriptionLabel.setText(" " + transcription);
            } else {
                translation = translationForLearning.get(wordIndex);
                translateField.setText(translation);
            }
        }
        if (randomRadioButton.isSelected()) {
            howToEnumerate = HowToEnumerate.RANDOM;
            wordIndex = 0;
            if (selectedDictionaryEnum == SelectedDictionary.EN_BG) {
                word = (String) shuffleWordsForLearning.get(wordIndex);
                translateField.setText(word);
                translateField.setText(word);
                String transcription = getTranscription(word);
                transcriptionLabel.setText(" " + transcription);
            } else {
                translation = (String) shuffleTranslationForLearning.get(wordIndex);
                translateField.setText(translation);
            }
        }
    }

    public String getTranscription(String word) {
        String translation = null;
        if (selectedDictionaryEnum == SelectedDictionary.EN_BG) {
            translation = dictDb.getTranslation(word, dictionaries.get(0));
        }
        if (selectedDictionaryEnum == SelectedDictionary.BG_EN) {
            return "";
        }
        int beginIndex = translation.indexOf('[');
        int endIndex = translation.indexOf(']') + 1;
        if (beginIndex == -1 && endIndex == 0) {
            return "";
        }
        String transcription = translation.substring(beginIndex, endIndex);
        return transcription;

    }
}
