package com.drowltd.dictionary.ui.desktop;

import com.drowltd.dictionary.core.db.DictDb;
import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import java.util.Random;
import java.util.ResourceBundle;

/**
 * User: bozhidar
 * Date: Sep 6, 2009
 * Time: 9:23:13 PM
 */
public class ExamForm {
    private JPanel topPanel;
    private JTextField guessField;
    private JButton answerButton;
    private JButton skipButton;
    private JTextArea translationTextArea;
    private JLabel currentWordLabel;
    private JLabel statusLabel;
    private JLabel feedbackLabel;
    private JProgressBar progressBar1;

    int currentWordNumber = 1;
    int wordsGuessed = 0;
    int maxWords = 10;

    List<String> words;
    DictDb dictDb = DictDb.getInstance();

    public ExamForm() {
        progressBar1.setMinimum(0);
        progressBar1.setMaximum(10);
        progressBar1.setValue(0);
        progressBar1.setStringPainted(true);

        words = dictDb.getWordsFromSelectedDictionary();

        getRandomWord();

        updateStatusBar();

        answerButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String answer = guessField.getText();

                if (answer.length() > 0) {
                    String fullTranslation = dictDb.getTranslation(currentWordLabel.getText());

                    if (fullTranslation.contains(answer)) {
                        feedbackLabel.setText("Your guess was correct.");
                        getRandomWord();
                    } else {
                        feedbackLabel.setText("Your guess was incorrect");
                        getRandomWord();
                    }

                    currentWordNumber++;
                    updateScore();

                    translationTextArea.setText(fullTranslation);
                    guessField.setText(null);
                } else {
                    JOptionPane.showMessageDialog(topPanel, "Please, enter a guess");
                }
            }
        });

        skipButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                translationTextArea.setText(dictDb.getTranslation(currentWordLabel.getText()));
                feedbackLabel.setText("You skipped the last word");
                getRandomWord();
                currentWordNumber++;
                updateScore();
            }
        });
    }

    private void updateScore() {
        progressBar1.setValue(currentWordNumber);
        progressBar1.setString(wordsGuessed + "/" + maxWords);

        updateStatusBar();

        if (currentWordNumber == maxWords + 1) {
            answerButton.setEnabled(false);
            skipButton.setEnabled(false);

            JOptionPane.showMessageDialog(topPanel, "Exam finished");
        }
    }

    private void updateStatusBar() {
        statusLabel.setText((maxWords - currentWordNumber + 1) + " out of " + maxWords + " remaining");
    }

    private void getRandomWord() {
        currentWordLabel.setText(words.get(new Random().nextInt(words.size())));
    }

    public JComponent getComponent() {
        return topPanel;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        topPanel = new JPanel();
        topPanel.setLayout(new FormLayout("fill:60dlu:noGrow,left:4dlu:noGrow,fill:100dlu:noGrow,left:4dlu:noGrow,fill:60dlu:noGrow,left:4dlu:noGrow,fill:60dlu:noGrow,left:5dlu:noGrow,fill:max(d;4px):grow", "center:20dlu:noGrow,top:4dlu:noGrow,center:20dlu:noGrow,top:4dlu:noGrow,center:20dlu:noGrow,top:4dlu:noGrow,center:10dlu:noGrow,top:4dlu:noGrow,center:d:grow,top:5dlu:noGrow,center:10dlu:noGrow"));
        final JLabel label1 = new JLabel();
        this.$$$loadLabelText$$$(label1, ResourceBundle.getBundle("i18n/DesktopUI").getString("Word(Label)"));
        CellConstraints cc = new CellConstraints();
        topPanel.add(label1, cc.xy(1, 1, CellConstraints.CENTER, CellConstraints.DEFAULT));
        final JLabel label2 = new JLabel();
        this.$$$loadLabelText$$$(label2, ResourceBundle.getBundle("i18n/DesktopUI").getString("Guess(Label)"));
        topPanel.add(label2, cc.xy(1, 3, CellConstraints.CENTER, CellConstraints.DEFAULT));
        currentWordLabel = new JLabel();
        currentWordLabel.setText("Label");
        topPanel.add(currentWordLabel, cc.xy(3, 1));
        guessField = new JTextField();
        topPanel.add(guessField, cc.xy(3, 3, CellConstraints.FILL, CellConstraints.DEFAULT));
        final JScrollPane scrollPane1 = new JScrollPane();
        topPanel.add(scrollPane1, cc.xyw(3, 9, 7, CellConstraints.FILL, CellConstraints.FILL));
        translationTextArea = new JTextArea();
        scrollPane1.setViewportView(translationTextArea);
        final JLabel label3 = new JLabel();
        this.$$$loadLabelText$$$(label3, ResourceBundle.getBundle("i18n/DesktopUI").getString("Translation(Label)"));
        topPanel.add(label3, cc.xy(1, 9, CellConstraints.CENTER, CellConstraints.DEFAULT));
        statusLabel = new JLabel();
        this.$$$loadLabelText$$$(statusLabel, ResourceBundle.getBundle("i18n/DesktopUI").getString("NoTest(Label)"));
        topPanel.add(statusLabel, cc.xyw(1, 11, 7));
        feedbackLabel = new JLabel();
        this.$$$loadLabelText$$$(feedbackLabel, ResourceBundle.getBundle("i18n/DesktopUI").getString("BeginExam(Label)"));
        topPanel.add(feedbackLabel, cc.xyw(3, 7, 5));
        answerButton = new JButton();
        this.$$$loadButtonText$$$(answerButton, ResourceBundle.getBundle("i18n/DesktopUI").getString("Answer(Label)"));
        topPanel.add(answerButton, cc.xy(5, 3));
        skipButton = new JButton();
        this.$$$loadButtonText$$$(skipButton, ResourceBundle.getBundle("i18n/DesktopUI").getString("Skip(Label)"));
        topPanel.add(skipButton, cc.xy(7, 3));
        progressBar1 = new JProgressBar();
        topPanel.add(progressBar1, cc.xyw(3, 5, 7, CellConstraints.FILL, CellConstraints.DEFAULT));
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadLabelText$$$(JLabel component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setDisplayedMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadButtonText$$$(AbstractButton component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return topPanel;
    }
}
