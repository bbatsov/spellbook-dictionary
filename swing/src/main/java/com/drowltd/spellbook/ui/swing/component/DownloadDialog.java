package com.drowltd.spellbook.ui.swing.component;

import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import com.jidesoft.swing.FolderChooser;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.*;
import java.net.URL;

public class DownloadDialog extends JDialog implements PropertyChangeListener {
    private JPanel contentPane;
    private JButton buttonOK;
    private JButton buttonCancel;
    private JButton downloadButton;
    private JButton changeFolderButton;
    private JLabel downloadUrlLabel;
    private JLabel downloadFolderLabel;
    private ProgressMonitor progressMonitor;
    private Task task;
    private boolean ok;
    private String url;
    private String downloadFolder;

    public DownloadDialog() {
        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(buttonOK);

        buttonOK.setEnabled(false);

        File currentDir = new File(".");

        try {
            downloadFolder = currentDir.getCanonicalPath();
            downloadFolderLabel.setText(downloadFolder);
        } catch (IOException e) {
            e.printStackTrace();
        }

        buttonOK.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                onOK();
            }
        });

        buttonCancel.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        });

        downloadButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //careful not to overwrite existing files
                File file = new File(getDownloadPath());
                if (file.exists() &&
                        JOptionPane.showConfirmDialog(DownloadDialog.this,
                                "File already exists. Overwrite it?") != JOptionPane.YES_OPTION) {
                    System.out.println("do not download");
                } else {
                    task = new Task();
                    task.addPropertyChangeListener(DownloadDialog.this);
                    task.execute();
                    downloadButton.setEnabled(false);
                }
            }
        });

        changeFolderButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                FolderChooser folderChooser = new FolderChooser();

                int result = folderChooser.showSaveDialog(DownloadDialog.this);

                if (result == FolderChooser.APPROVE_OPTION) {
                    downloadFolder = folderChooser.getSelectedFolder().getAbsolutePath();
                    downloadFolderLabel.setText(downloadFolder);
                }
            }
        });

// call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });

// call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        }, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
    }

    private void onOK() {
// add your code here
        dispose();

        ok = true;
    }

    private void onCancel() {
// add your code here if necessary
        dispose();
    }

    public boolean showDialog(String url) {
        this.url = url;
        downloadUrlLabel.setText(url);
        progressMonitor = new ProgressMonitor(this, "Downloading url " + url, "Downloading", 0, 100);

        pack();

        setVisible(true);

        return ok;
    }

    public String getDownloadFolder() {
        return downloadFolder;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new FormLayout("fill:d:grow", "center:d:grow,top:4dlu:noGrow,center:max(d;4px):noGrow"));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new FormLayout("fill:d:grow,left:4dlu:noGrow,fill:max(d;4px):noGrow", "center:d:grow"));
        CellConstraints cc = new CellConstraints();
        contentPane.add(panel1, cc.xy(1, 3));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new FormLayout("fill:d:grow,left:4dlu:noGrow,fill:d:grow", "center:d:grow"));
        panel1.add(panel2, cc.xy(3, 1));
        buttonOK = new JButton();
        buttonOK.setText("OK");
        panel2.add(buttonOK, cc.xy(1, 1));
        buttonCancel = new JButton();
        buttonCancel.setText("Cancel");
        panel2.add(buttonCancel, cc.xy(3, 1));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new FormLayout("fill:max(d;4px):noGrow,left:4dlu:noGrow,fill:d:grow,left:4dlu:noGrow,fill:max(d;4px):noGrow", "center:d:grow,top:4dlu:noGrow,center:d:grow"));
        contentPane.add(panel3, cc.xy(1, 1));
        final JLabel label1 = new JLabel();
        label1.setText("URL");
        panel3.add(label1, cc.xy(1, 1));
        final JLabel label2 = new JLabel();
        label2.setText("Download location");
        panel3.add(label2, cc.xy(1, 3));
        downloadButton = new JButton();
        downloadButton.setText("Download");
        panel3.add(downloadButton, cc.xy(5, 1));
        changeFolderButton = new JButton();
        changeFolderButton.setText("Change folder");
        panel3.add(changeFolderButton, cc.xy(5, 3));
        downloadUrlLabel = new JLabel();
        downloadUrlLabel.setText("Label");
        panel3.add(downloadUrlLabel, cc.xy(3, 1, CellConstraints.LEFT, CellConstraints.DEFAULT));
        downloadFolderLabel = new JLabel();
        downloadFolderLabel.setText("Label");
        panel3.add(downloadFolderLabel, cc.xy(3, 3));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }


    class Task extends SwingWorker<Void, Void> {
        @Override
        public Void doInBackground() {
            try {
                URL dbUrl = new URL(url);
                setProgress(0);

                int contentLength = dbUrl.openConnection().getContentLength();

                BufferedInputStream in = new BufferedInputStream(dbUrl.openStream());
                FileOutputStream fos = new FileOutputStream(getDownloadPath());
                BufferedOutputStream bout = new BufferedOutputStream(fos, 1024);
                byte[] data = new byte[1024];
                int x;
                int total = 0;

                System.out.println("Downloading file " + url);

                while ((x = in.read(data, 0, 1024)) >= 0) {
                    total += x;
                    final int percents = (int) (((double) total / contentLength) * 100);
                    setProgress(percents);
                    bout.write(data, 0, x);
                }

                bout.close();
                in.close();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            return null;
        }

        @Override
        public void done() {
            Toolkit.getDefaultToolkit().beep();
            downloadButton.setEnabled(true);
        }

    }

    public String getDownloadPath() {
        return downloadFolder + File.separator + getFileName();
    }

    private String getFileName() {
        return url.substring(url.lastIndexOf("/") + 1);
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if ("progress".equals(evt.getPropertyName())) {
            int progress = (Integer) evt.getNewValue();
            progressMonitor.setProgress(progress);
            String message =
                    String.format("Completed %d%%.\n", progress);
            progressMonitor.setNote(message);
            if (progressMonitor.isCanceled() || task.isDone()) {
                Toolkit.getDefaultToolkit().beep();
                if (progressMonitor.isCanceled()) {
                    task.cancel(true);
                    File file = new File(getDownloadPath());

                    if (file.exists()) {
                        // removing partially downloaded file
                        file.delete();
                    }

                    System.out.println("Task canceled.\n");
                } else {
                    System.out.println("Task completed.\n");
                }

                downloadButton.setEnabled(true);
                buttonOK.setEnabled(true);
            }
        }

    }

    public static void main(String[] args) {
        DownloadDialog dialog = new DownloadDialog();

        dialog.showDialog("");

        System.exit(0);
    }
}
