package com.drowltd.dictionary.ui.desktop;

import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ResourceBundle;
import java.util.prefs.Preferences;

/**
 * User: bozhidar
 * Date: Oct 16, 2009
 * Time: 12:50:28 AM
 */
public class PreferencesForm {
    private JPanel topPanel;
    private JCheckBox minimizeToTrayCheckBox;
    private JComboBox languageBox;
    private JCheckBox checkBox1;

    private SupportedLanguages selectedLanguage;

    public PreferencesForm() {
        String[] languages = {"English", "Bulgarian"};

        languageBox.setModel(new DefaultComboBoxModel(languages));

        Preferences preferences = Preferences.userNodeForPackage(SpellbookApp.class);

        selectedLanguage = SupportedLanguages.valueOf(preferences.get("LANG", "EN"));

        languageBox.setSelectedItem(selectedLanguage == SupportedLanguages.EN ? "English" : "Bulgarian");

        minimizeToTrayCheckBox.setSelected(!"false".equals(preferences.get("MIN_TO_TRAY", "false")));

        languageBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (languageBox.getSelectedIndex() == 0) {
                    selectedLanguage = SupportedLanguages.EN;
                } else {
                    selectedLanguage = SupportedLanguages.BG;
                }
            }
        });
    }

    public SupportedLanguages getSelectedLanguage() {
        return selectedLanguage;
    }

    public JComponent getComponent() {
        return topPanel;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        topPanel = new JPanel();
        topPanel.setLayout(new FormLayout("fill:175px:noGrow,left:4dlu:noGrow,fill:149px:noGrow", "center:d:noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow"));
        final JLabel label1 = new JLabel();
        this.$$$loadLabelText$$$(label1, ResourceBundle.getBundle("i18n/DesktopUI").getString("Language(Label)"));
        CellConstraints cc = new CellConstraints();
        topPanel.add(label1, cc.xy(1, 1));
        final JLabel label2 = new JLabel();
        this.$$$loadLabelText$$$(label2, ResourceBundle.getBundle("i18n/DesktopUI").getString("MinimizeToTray(Label)"));
        topPanel.add(label2, cc.xy(1, 3));
        minimizeToTrayCheckBox = new JCheckBox();
        minimizeToTrayCheckBox.setText("");
        topPanel.add(minimizeToTrayCheckBox, cc.xy(3, 3, CellConstraints.CENTER, CellConstraints.DEFAULT));
        languageBox = new JComboBox();
        topPanel.add(languageBox, cc.xy(3, 1));
        final JLabel label3 = new JLabel();
        this.$$$loadLabelText$$$(label3, ResourceBundle.getBundle("i18n/DesktopUI").getString("ClipboardIntegration(Label)"));
        topPanel.add(label3, cc.xy(1, 5));
        checkBox1 = new JCheckBox();
        checkBox1.setText("");
        topPanel.add(checkBox1, cc.xy(3, 5, CellConstraints.CENTER, CellConstraints.DEFAULT));
        label1.setLabelFor(languageBox);
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadLabelText$$$(JLabel component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setDisplayedMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return topPanel;
    }
}
